import gradio as gr
import pandas as pd
from duplicate_detector import DuplicateDetector
from typing import Tuple, Optional, Dict, Any
import io

class DuplicateDetectorApp:
    def __init__(self):
        self.detector = DuplicateDetector()
        self.current_df = None
        self.duplicate_groups = None
        self.stats = None

    def load_excel_file(self, file) -> Tuple[Optional[Dict], str]:
        if file is None:
            return None, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª"
        
        try:
            self.current_df = pd.read_excel(file.name)
            
            # –£–¥–∞–ª—è–µ–º –±–µ–∑—ã–º—è–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            unnamed_cols = [col for col in self.current_df.columns if col.startswith('Unnamed')]
            if unnamed_cols:
                self.current_df = self.current_df.drop(columns=unnamed_cols)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            name_col = self.detector.find_name_column(self.current_df)
            address_col = self.detector.find_address_column(self.current_df)
            
            if not name_col:
                return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –∏–ª–∏ '–∏–º—è'"

            if not address_col:
                return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è '–∞–¥—Ä–µ—Å', 'address' –∏–ª–∏ 'address'"
            
            info = f"‚úÖ **–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            info += f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{len(self.current_df)}**\n"
            info += f"- –ö–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π: **{name_col}**\n"
            info += f"- –ö–æ–ª–æ–Ω–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: **{address_col if address_col else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}**\n\n"
            info += "üîç –ù–∞–∂–º–∏—Ç–µ **'–ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã'** –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
            
            return (
                {
                    "data": self.current_df.values.tolist(),
                    "headers": self.current_df.columns.tolist(),
                },
                info
            )
        
        except Exception as e:
            error_msg = f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞**: {str(e)}"
            return None, error_msg

    def find_duplicates(self) -> Tuple[Optional[Dict], str]:
        if self.current_df is None:
            return None, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª"
        
        try:
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 70% (–¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞)
            self.detector.similarity_threshold = 0.70
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            name_col = self.detector.find_name_column(self.current_df)
            address_col = self.detector.find_address_column(self.current_df)
            
            if not name_col:
                return None, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"
            
            self.duplicate_groups, self.stats = self.detector.find_duplicates(
                df=self.current_df,
                name_column=name_col,
                address_column=address_col
            )
            
            if self.duplicate_groups:
                styled_data = self.detector.create_styled_dataframe(
                    self.current_df, 
                    self.duplicate_groups,
                    True  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                )
                
                report = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**\n\n"
                report += f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{self.stats['total_records']}**\n"
                report += f"- –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: **{self.stats['duplicate_groups']}**\n"
                report += f"- –ó–∞–ø–∏—Å–µ–π-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤: **{self.stats['duplicate_records']}**\n"
                report += f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: **{self.stats['unique_records']}**\n\n"
                report += f"üí° **–î—É–±–ª–∏–∫–∞—Ç—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—ã–¥–µ–ª–µ–Ω—ã —Ü–≤–µ—Ç–æ–º**\n"
                report += f"‚öôÔ∏è –ú–µ—Ç–æ–¥: **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (70%)**\n"
                report += f"üî¨ **–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º** - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ + –ñ–∞–∫–∫–∞—Ä + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"
                
                return styled_data, report
            else:
                return (
                    {
                        "data": self.current_df.values.tolist(),
                        "headers": self.current_df.columns.tolist(),
                    },
                    f"‚úÖ **–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!**\n\n–í—Å–µ {len(self.current_df)} –∑–∞–ø–∏—Å–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (70%)"
                )
        
        except Exception as e:
            return None, f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤**: {str(e)}"

    def download_results(self):
        if self.current_df is None or self.duplicate_groups is None:
            return
        
        try:
            grouped_df = self.detector.create_grouped_dataframe(self.current_df, self.duplicate_groups)
            
            output_file = "duplicates_result.xlsx"
            grouped_df.to_excel(output_file, index=False)
            
            print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def create_interface(self):
        with gr.Blocks(
            title="üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Excel",
            theme=gr.themes.Soft(),
            css="""
            .main-header {
                text-align: center;
                background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 1.5rem;
                border-radius: 10px;
                margin-bottom: 1.5rem;
            }
            .button-row {
                display: flex;
                gap: 1rem;
                justify-content: center;
                margin: 1rem 0;
            }
            """
        ) as app:
            
            gr.HTML("""
            <div class="main-header">
                <h1>üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Excel</h1>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –Ω–∞–π–¥–∏—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ –∞–¥—Ä–µ—Å–∞–º</p>
            </div>
            """)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏
            file_input = gr.File(
                label="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                file_types=[".xlsx", ".xls"],
                file_count="single"
            )
            
            file_info = gr.Markdown("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            with gr.Row():
                find_btn = gr.Button(
                    "üîç –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã", 
                    variant="primary",
                    size="lg",
                    scale=1
                )
                download_btn = gr.Button(
                    "üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    variant="secondary",
                    size="lg",
                    visible=False,
                    scale=1
                )
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–Ω–∏–∑—É
            results_table = gr.DataFrame(
                label="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                interactive=False,
                wrap=True,
                max_height=600
            )
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            file_input.upload(
                fn=self.load_excel_file,
                inputs=[file_input],
                outputs=[results_table, file_info]
            )
            
            find_btn.click(
                fn=lambda: (*self.find_duplicates(), gr.update(visible=True)),
                inputs=[],
                outputs=[results_table, file_info, download_btn]
            )
            
            download_btn.click(
                fn=self.download_results,
                inputs=[],
                outputs=[]
            )
            
        return app

def main():
    app = DuplicateDetectorApp()
    interface = app.create_interface()
    interface.launch(
        share=False,
        server_name="0.0.0.0",
        server_port=7860,
        show_api=False
    )

if __name__ == "__main__":
    main() 