import gradio as gr
import pandas as pd
from duplicate_detector import DuplicateDetector
from typing import Tuple, Optional, Dict, Any
import io

class DuplicateDetectorApp:
    def __init__(self):
        self.detector = DuplicateDetector()
        self.current_df = None
        self.duplicate_groups = None
        self.stats = None

    def load_excel_file(self, file) -> Tuple[Optional[Dict], str, str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel —Ñ–∞–π–ª –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        if file is None:
            return None, "", "", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel"
        
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            self.current_df = pd.read_excel(file.name)
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ "Unnamed" (–ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
            unnamed_cols = [col for col in self.current_df.columns if col.startswith('Unnamed')]
            if unnamed_cols:
                self.current_df = self.current_df.drop(columns=unnamed_cols)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            info = f"üìä **–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            info += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: **{len(self.current_df)}**\n"
            info += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: **{len(self.current_df.columns)}**\n"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            try:
                file_size = getattr(file, 'size', None)
                if file_size is not None:
                    info += f"- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: **{file_size} –±–∞–π—Ç**\n"
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
            columns = self.current_df.columns.tolist()
            name_column_choices = gr.Dropdown(choices=columns, value=columns[0] if columns else None)
            address_column_choices = gr.Dropdown(choices=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"] + columns, value="–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return (
                {
                    "data": self.current_df.values.tolist(),
                    "headers": self.current_df.columns.tolist(),
                },
                info,
                name_column_choices,
                address_column_choices
            )
        
        except Exception as e:
            error_msg = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞**: {str(e)}"
            return None, error_msg, "", ""

    def find_duplicates(self, name_column: str, address_column: str, threshold: int) -> Tuple[Optional[Dict], str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"""
        if self.current_df is None:
            return None, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel"
        
        if not name_column:
            return None, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏
            self.detector.similarity_threshold = threshold
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∞–¥—Ä–µ—Å–∞
            address_col = address_column if address_column != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å" else None
            
            # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            self.duplicate_groups, self.stats = self.detector.find_duplicates(
                df=self.current_df,
                name_column=name_column,
                address_column=address_col
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            if self.duplicate_groups:
                styled_data = self.detector.create_styled_dataframe(
                    self.current_df, 
                    self.duplicate_groups
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**\n\n"
                report += f"- –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: **{self.stats['total_records']}**\n"
                report += f"- –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: **{self.stats['duplicate_groups']}**\n"
                report += f"- –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π: **{self.stats['duplicate_records']}**\n"
                report += f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: **{self.stats['unique_records']}**\n\n"
                report += f"üí° **–î—É–±–ª–∏–∫–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º**\n"
                report += f"‚öôÔ∏è –ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏: **{threshold}%**"
                
                return styled_data, report
            else:
                return (
                    {
                        "data": self.current_df.values.tolist(),
                        "headers": self.current_df.columns.tolist(),
                    },
                    f"‚úÖ **–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!**\n\n–í—Å–µ {len(self.current_df)} –∑–∞–ø–∏—Å–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ {threshold}%"
                )
        
        except Exception as e:
            return None, f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤**: {str(e)}"

    def download_results(self) -> Optional[str]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if self.current_df is None or self.duplicate_groups is None:
            return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame
            df_result = self.current_df.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            df_result['–ì—Ä—É–ø–ø–∞_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤'] = 0
            
            for group_idx, group in enumerate(self.duplicate_groups, 1):
                for row_idx in group:
                    df_result.loc[row_idx, '–ì—Ä—É–ø–ø–∞_–¥—É–±–ª–∏–∫–∞—Ç–æ–≤'] = group_idx
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            output_file = "duplicates_result.xlsx"
            df_result.to_excel(output_file, index=False)
            
            return output_file
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return None

    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio"""
        with gr.Blocks(
            title="üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Excel",
            theme=gr.themes.Soft(),
            css="""
            .main-header {
                text-align: center;
                background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 2rem;
                border-radius: 10px;
                margin-bottom: 2rem;
            }
            .stats-box {
                background: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 1rem;
                margin: 1rem 0;
            }
            """
        ) as app:
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            gr.HTML("""
            <div class="main-header">
                <h1>üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª–∞—Ö</h1>
                <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –∏ –Ω–∞–π–¥–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å —É–º–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π</p>
            </div>
            """)
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with gr.Row():
                with gr.Column(scale=1):
                    gr.HTML("<h3>üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>")
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                    file_input = gr.File(
                        label="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
                        file_types=[".xlsx", ".xls"],
                        file_count="single"
                    )
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    file_info = gr.Markdown("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    with gr.Group():
                        name_column = gr.Dropdown(
                            label="üè∑Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ)",
                            choices=[],
                            interactive=True
                        )
                        
                        address_column = gr.Dropdown(
                            label="üìç –ö–æ–ª–æ–Ω–∫–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                            choices=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"],
                            value="–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
                            interactive=True
                        )
                        
                        threshold = gr.Slider(
                            label="üéØ –ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ (%)",
                            minimum=50,
                            maximum=100,
                            value=85,
                            step=5,
                            info="–ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Å—Ç—Ä–æ–∂–µ –ø–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"
                        )
                    
                    # –ö–Ω–æ–ø–∫–∏
                    with gr.Row():
                        find_btn = gr.Button(
                            "üîç –ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã", 
                            variant="primary",
                            size="lg"
                        )
                        download_btn = gr.Button(
                            "üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            variant="secondary",
                            visible=False
                        )
                
                with gr.Column(scale=2):
                    gr.HTML("<h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h3>")
                    
                    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    results_info = gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                    data_table = gr.Dataframe(
                        label="–î–∞–Ω–Ω—ã–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏",
                        interactive=False,
                        wrap=True
                    )
                    
                    # –§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    download_file = gr.File(
                        label="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                        visible=False
                    )
            
            # –ü–æ–¥–≤–∞–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            gr.HTML("""
            <div style="margin-top: 2rem; padding: 1rem; background: #f8f9fa; border-radius: 8px; text-align: center;">
                <h4>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h4>
                <p><strong>1.</strong> –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏</p>
                <p><strong>2.</strong> –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</p>
                <p><strong>3.</strong> –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞</p>
                <p><strong>4.</strong> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã"</p>
                <p><strong>5.</strong> –î—É–±–ª–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ</p>
            </div>
            """)
            
            # –°–æ–±—ã—Ç–∏—è
            file_input.upload(
                fn=self.load_excel_file,
                inputs=[file_input],
                outputs=[data_table, file_info, name_column, address_column]
            )
            
            find_btn.click(
                fn=self.find_duplicates,
                inputs=[name_column, address_column, threshold],
                outputs=[data_table, results_info]
            ).then(
                fn=lambda: [gr.update(visible=True), gr.update(visible=True)],
                outputs=[download_btn, download_file]
            )
            
            download_btn.click(
                fn=self.download_results,
                outputs=[download_file]
            )
        
        return app

def main():
    app_instance = DuplicateDetectorApp()
    app = app_instance.create_interface()
    
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        debug=True
    )

if __name__ == "__main__":
    main() 